{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";var initialState={copys:[],textarea:'{{ $Test1 := \"Te xt\" }}\\n{{ $Test2 := \"Teeeeeext\" }}\\n{{ $Test3 := \"Texxxxxt\" }}\\n{{ $Test4 := \"Tettttt\" }}',error:\"\"};var copySlice=createSlice({name:\"copy\",initialState:initialState,reducers:{// Stores text objects from textarea\ncreateCopy:function createCopy(state,action){var textObj=action.payload.split(\"\\n\").filter(function(text){return text.includes(\"{{\");}).map(function(text){var newText=text.replace(/\\s+/g,\" \").trim();var value=\"\";var sentence=\"\";if(newText.includes('= \"')){sentence=newText.split('= \"')[1].split('\" }}')[0];}var textArr=newText.split(\" \");var name=textArr[1].slice(1);value=(sentence?sentence:textArr[3].includes('\"\"')?\"\":textArr[3]).replaceAll('\\\\\"','\"').replaceAll(\"\\\\'\",\"'\");return{text:{name:name,value:value}};});state.copys=textObj;var updatedCopy=textObj.map(function(copy){return\"{{ $\".concat(copy.text.name,\" := $.\").concat(copy.text.name,\" }}\");}).filter(function(copy){return copy!==\"{{ $ := $. }}\";});state.textarea=updatedCopy.join(\"\\n\");},foundError:function foundError(state,action){state.error=action.payload;}}});export var copyActions=copySlice.actions;export default copySlice;","map":{"version":3,"sources":["/Users/chrisstranger/Desktop/golang-lv-creator/src/store/copy-slice.tsx"],"names":["createSlice","initialState","copys","textarea","error","copySlice","name","reducers","createCopy","state","action","textObj","payload","split","filter","text","includes","map","newText","replace","trim","value","sentence","textArr","slice","replaceAll","updatedCopy","copy","join","foundError","copyActions","actions"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAeA,GAAMC,CAAAA,YAAuB,CAAG,CAC/BC,KAAK,CAAE,EADwB,CAE/BC,QAAQ,CACP,6GAH8B,CAI/BC,KAAK,CAAE,EAJwB,CAAhC,CAOA,GAAMC,CAAAA,SAAS,CAAGL,WAAW,CAAC,CAC7BM,IAAI,CAAE,MADuB,CAE7BL,YAAY,CAAZA,YAF6B,CAG7BM,QAAQ,CAAE,CACT;AACAC,UAFS,qBAEEC,KAFF,CAEmDC,MAFnD,CAEgF,CACxF,GAAMC,CAAAA,OAAO,CAAGD,MAAM,CAACE,OAAP,CACdC,KADc,CACR,IADQ,EAEdC,MAFc,CAEP,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,QAAL,CAAc,IAAd,CAAV,EAFO,EAGdC,GAHc,CAGV,SAACF,IAAD,CAAU,CACd,GAAMG,CAAAA,OAAO,CAAGH,IAAI,CAACI,OAAL,CAAa,MAAb,CAAqB,GAArB,EAA0BC,IAA1B,EAAhB,CAEA,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CAEA,GAAIJ,OAAO,CAACF,QAAR,CAAiB,KAAjB,CAAJ,CAA6B,CAC5BM,QAAQ,CAAGJ,OAAO,CAACL,KAAR,CAAc,KAAd,EAAqB,CAArB,EAAwBA,KAAxB,CAA8B,MAA9B,EAAsC,CAAtC,CAAX,CACA,CAED,GAAMU,CAAAA,OAAO,CAAGL,OAAO,CAACL,KAAR,CAAc,GAAd,CAAhB,CACA,GAAMP,CAAAA,IAAI,CAAGiB,OAAO,CAAC,CAAD,CAAP,CAAWC,KAAX,CAAiB,CAAjB,CAAb,CAEAH,KAAK,CAAG,CAACC,QAAQ,CAAGA,QAAH,CAAcC,OAAO,CAAC,CAAD,CAAP,CAAWP,QAAX,CAAoB,IAApB,EAA4B,EAA5B,CAAiCO,OAAO,CAAC,CAAD,CAA/D,EACNE,UADM,CACK,KADL,CACY,GADZ,EAENA,UAFM,CAEK,KAFL,CAEY,GAFZ,CAAR,CAGA,MAAO,CACNV,IAAI,CAAE,CAAET,IAAI,CAAJA,IAAF,CAAQe,KAAK,CAALA,KAAR,CADA,CAAP,CAGA,CAtBc,CAAhB,CAwBAZ,KAAK,CAACP,KAAN,CAAcS,OAAd,CACA,GAAMe,CAAAA,WAAW,CAAGf,OAAO,CACzBM,GADkB,CACd,SAACU,IAAD,sBAAiBA,IAAI,CAACZ,IAAL,CAAUT,IAA3B,kBAAwCqB,IAAI,CAACZ,IAAL,CAAUT,IAAlD,SADc,EAElBQ,MAFkB,CAEX,SAACa,IAAD,QAAUA,CAAAA,IAAI,GAAK,eAAnB,EAFW,CAApB,CAGAlB,KAAK,CAACN,QAAN,CAAiBuB,WAAW,CAACE,IAAZ,CAAiB,IAAjB,CAAjB,CACA,CAhCQ,CAkCTC,UAlCS,qBAkCEpB,KAlCF,CAkCSC,MAlCT,CAkCiB,CACzBD,KAAK,CAACL,KAAN,CAAcM,MAAM,CAACE,OAArB,CACA,CApCQ,CAHmB,CAAD,CAA7B,CA2CA,MAAO,IAAMkB,CAAAA,WAAW,CAAGzB,SAAS,CAAC0B,OAA9B,CAEP,cAAe1B,CAAAA,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface Copys_obj {\n\ttext: {\n\t\tname: string;\n\t\tvalue: string;\n\t};\n}\n\ninterface TypeState {\n\tcopys: Copys_obj[];\n\ttextarea: string;\n\terror: string;\n}\n\nconst initialState: TypeState = {\n\tcopys: [],\n\ttextarea:\n\t\t'{{ $Test1 := \"Te xt\" }}\\n{{ $Test2 := \"Teeeeeext\" }}\\n{{ $Test3 := \"Texxxxxt\" }}\\n{{ $Test4 := \"Tettttt\" }}',\n\terror: \"\",\n};\n\nconst copySlice = createSlice({\n\tname: \"copy\",\n\tinitialState,\n\treducers: {\n\t\t// Stores text objects from textarea\n\t\tcreateCopy(state: { copys: Copys_obj[]; textarea: string }, action: { payload: string }) {\n\t\t\tconst textObj = action.payload\n\t\t\t\t.split(\"\\n\")\n\t\t\t\t.filter((text) => text.includes(\"{{\"))\n\t\t\t\t.map((text) => {\n\t\t\t\t\tconst newText = text.replace(/\\s+/g, \" \").trim();\n\t\t\t\t\t\n\t\t\t\t\tlet value = \"\";\n\t\t\t\t\tlet sentence = \"\";\n\n\t\t\t\t\tif (newText.includes('= \"')) {\n\t\t\t\t\t\tsentence = newText.split('= \"')[1].split('\" }}')[0];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst textArr = newText.split(\" \");\n\t\t\t\t\tconst name = textArr[1].slice(1);\n\n\t\t\t\t\tvalue = (sentence ? sentence : textArr[3].includes('\"\"') ? \"\" : textArr[3])\n\t\t\t\t\t\t.replaceAll('\\\\\"', '\"')\n\t\t\t\t\t\t.replaceAll(\"\\\\'\", \"'\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: { name, value },\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\tstate.copys = textObj;\n\t\t\tconst updatedCopy = textObj\n\t\t\t\t.map((copy) => `{{ $${copy.text.name} := $.${copy.text.name} }}`)\n\t\t\t\t.filter((copy) => copy !== \"{{ $ := $. }}\");\n\t\t\tstate.textarea = updatedCopy.join(\"\\n\");\n\t\t},\n\n\t\tfoundError(state, action) {\n\t\t\tstate.error = action.payload;\n\t\t},\n\t},\n});\n\nexport const copyActions = copySlice.actions;\n\nexport default copySlice;\n"]},"metadata":{},"sourceType":"module"}