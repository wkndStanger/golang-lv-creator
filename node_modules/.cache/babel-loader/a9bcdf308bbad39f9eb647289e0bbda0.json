{"ast":null,"code":"import{useRef,useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{copyActions}from\"../../store/copy-slice\";import Card from\"../UI/Card\";import Button from\"../UI/Button\";import classes from\"./TextareaCard.module.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TextareaCard=function TextareaCard(){var textCopyRef=useRef(null);var textarea=useSelector(function(state){return state.copy.textarea;});var errorStore=useSelector(function(state){return state.copy.error;});var dispatch=useDispatch();useEffect(function(){textCopyRef.current.value=textarea;},[textarea]);var addTextHandler=function addTextHandler(){var enteredText=textCopyRef.current.value.trim();if(textCopyRef.current.value.trim().length===0){return dispatch(copyActions.foundError(\"Please enter text into the text area!\"));}dispatch(copyActions.foundError(null));dispatch(copyActions.createCopy(enteredText));};return/*#__PURE__*/_jsxs(Card,{className:classes.hero,children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Golang LV Creator\"}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"textarea\",children:[\"Insert a list of variable names to be\",/*#__PURE__*/_jsx(\"br\",{}),\" converted to Golang Script\"]}),/*#__PURE__*/_jsx(\"textarea\",{name:\"textarea\",id:\"textarea\",ref:textCopyRef}),/*#__PURE__*/_jsx(\"div\",{className:classes[\"btn-create\"],children:/*#__PURE__*/_jsx(Button,{onClick:addTextHandler,children:\"Format Variables\"})}),errorStore&&/*#__PURE__*/_jsx(\"p\",{children:errorStore})]});};export default TextareaCard;","map":{"version":3,"sources":["/Users/chrisstranger/Desktop/golang-lv-creator/src/components/Cards/LowerTextArea.tsx"],"names":["useRef","useEffect","useSelector","useDispatch","copyActions","Card","Button","classes","TextareaCard","textCopyRef","textarea","state","copy","errorStore","error","dispatch","current","value","addTextHandler","enteredText","trim","length","foundError","createCopy","hero"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,SAAjB,KAAkC,OAAlC,CACA,OAAyBC,WAAzB,CAAsCC,WAAtC,KAAyD,aAAzD,CACA,OAASC,WAAT,KAA4B,wBAA5B,CAEA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,2BAApB,C,wFAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAC1B,GAAMC,CAAAA,WAAW,CAAGT,MAAM,CAAsB,IAAtB,CAA1B,CACA,GAAMU,CAAAA,QAAQ,CAAGR,WAAW,CAAC,SAACS,KAAD,QAA2BA,CAAAA,KAAK,CAACC,IAAN,CAAWF,QAAtC,EAAD,CAA5B,CACA,GAAMG,CAAAA,UAAU,CAAGX,WAAW,CAAC,SAACS,KAAD,QAA2BA,CAAAA,KAAK,CAACC,IAAN,CAAWE,KAAtC,EAAD,CAA9B,CACA,GAAMC,CAAAA,QAAQ,CAAGZ,WAAW,EAA5B,CAEAF,SAAS,CAAC,UAAM,CACfQ,WAAW,CAACO,OAAZ,CAAqBC,KAArB,CAA6BP,QAA7B,CACA,CAFQ,CAEN,CAACA,QAAD,CAFM,CAAT,CAIA,GAAMQ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC5B,GAAMC,CAAAA,WAAW,CAAGV,WAAW,CAACO,OAAZ,CAAqBC,KAArB,CAA2BG,IAA3B,EAApB,CACA,GAAIX,WAAW,CAACO,OAAZ,CAAqBC,KAArB,CAA2BG,IAA3B,GAAkCC,MAAlC,GAA6C,CAAjD,CAAoD,CACnD,MAAON,CAAAA,QAAQ,CAACX,WAAW,CAACkB,UAAZ,CAAuB,uCAAvB,CAAD,CAAf,CACA,CACDP,QAAQ,CAACX,WAAW,CAACkB,UAAZ,CAAuB,IAAvB,CAAD,CAAR,CACAP,QAAQ,CAACX,WAAW,CAACmB,UAAZ,CAAuBJ,WAAvB,CAAD,CAAR,CACA,CAPD,CASA,mBACC,MAAC,IAAD,EAAM,SAAS,CAAEZ,OAAO,CAACiB,IAAzB,wBACC,yCADD,cAEU,eAAO,OAAO,CAAC,UAAf,gEAA+D,aAA/D,iCAFV,cAGC,iBAAU,IAAI,CAAC,UAAf,CAA0B,EAAE,CAAC,UAA7B,CAAwC,GAAG,CAAEf,WAA7C,EAHD,cAIC,YAAK,SAAS,CAAEF,OAAO,CAAC,YAAD,CAAvB,uBAEC,KAAC,MAAD,EAAQ,OAAO,CAAEW,cAAjB,8BAFD,EAJD,CAQEL,UAAU,eAAI,mBAAIA,UAAJ,EARhB,GADD,CAYA,CA/BD,CAiCA,cAAeL,CAAAA,YAAf","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\nimport { copyActions } from \"../../store/copy-slice\";\n\nimport Card from \"../UI/Card\";\nimport Button from \"../UI/Button\";\nimport classes from \"./TextareaCard.module.css\";\n\n\nconst TextareaCard = () => {\n\tconst textCopyRef = useRef<HTMLTextAreaElement>(null);\n\tconst textarea = useSelector((state: RootStateOrAny) => state.copy.textarea);\n\tconst errorStore = useSelector((state: RootStateOrAny) => state.copy.error);\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\ttextCopyRef.current!.value = textarea;\n\t}, [textarea]);\n\n\tconst addTextHandler = () => {\n\t\tconst enteredText = textCopyRef.current!.value.trim();\n\t\tif (textCopyRef.current!.value.trim().length === 0) {\n\t\t\treturn dispatch(copyActions.foundError(\"Please enter text into the text area!\"));\n\t\t}\n\t\tdispatch(copyActions.foundError(null));\n\t\tdispatch(copyActions.createCopy(enteredText));\n\t};\n\n\treturn (\n\t\t<Card className={classes.hero}>\n\t\t\t<h1>Golang LV Creator</h1>\n            <label htmlFor=\"textarea\">Insert a list of variable names to be<br/> converted to Golang Script</label>\n\t\t\t<textarea name=\"textarea\" id=\"textarea\" ref={textCopyRef}></textarea>\n\t\t\t<div className={classes[\"btn-create\"]}>\n\t\t\t\t{/* <Button onClick={copyHandler}>Copy</Button> */}\n\t\t\t\t<Button onClick={addTextHandler}>Format Variables</Button>\n\t\t\t</div>\n\t\t\t{errorStore && <p>{errorStore}</p>}\n\t\t</Card>\n\t);\n};\n\nexport default TextareaCard;\n"]},"metadata":{},"sourceType":"module"}