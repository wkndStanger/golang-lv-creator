{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  copys: [],\n  textarea: 'Test1\\nTest2\\nTest3\\nTest4',\n  error: \"\"\n};\nconst copySlice2 = createSlice({\n  name: \"copy\",\n  initialState,\n  reducers: {\n    // Stores text objects from textarea\n    createCopy(state, action) {\n      const textObj = action.payload.split(\"\\n\") // .filter((text) => text.includes(\",\"))\n      .map(text => {\n        const newText = text.replace(\",\", \"\").trim();\n        let value = \"\";\n        const textArr = newText;\n        const name = textArr;\n        value = textArr;\n        return {\n          text: {\n            name,\n            value\n          }\n        };\n      });\n      state.copys = textObj;\n      const updatedCopy = textObj.map(copy => `{{ $${copy.text.name} := $.${copy.text.name} }}`).filter(copy => copy !== \"{{ $ := $. }}\");\n      state.textarea = updatedCopy.join(\"\\n\");\n    },\n\n    foundError(state, action) {\n      state.error = action.payload;\n    }\n\n  }\n});\nexport const copyActions = copySlice2.actions;\nexport default copySlice2;","map":{"version":3,"sources":["/Users/chrisstranger/Desktop/golang-lv-creator/src/store/LowGoConvert.tsx"],"names":["createSlice","initialState","copys","textarea","error","copySlice2","name","reducers","createCopy","state","action","textObj","payload","split","map","text","newText","replace","trim","value","textArr","updatedCopy","copy","filter","join","foundError","copyActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAeA,MAAMC,YAAuB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,EADwB;AAE/BC,EAAAA,QAAQ,EACP,4BAH8B;AAI/BC,EAAAA,KAAK,EAAE;AAJwB,CAAhC;AAOA,MAAMC,UAAU,GAAGL,WAAW,CAAC;AAC9BM,EAAAA,IAAI,EAAE,MADwB;AAE9BL,EAAAA,YAF8B;AAG9BM,EAAAA,QAAQ,EAAE;AACT;AACAC,IAAAA,UAAU,CAACC,KAAD,EAAiDC,MAAjD,EAA8E;AACvF,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,CACdC,KADc,CACR,IADQ,EAGf;AAHe,OAKdC,GALc,CAKTC,IAAD,IAAU;AACd,cAAMC,OAAO,GAAGD,IAAI,CAACE,OAAL,CAAa,GAAb,EAAkB,EAAlB,EAAsBC,IAAtB,EAAhB;AAEA,YAAIC,KAAK,GAAG,EAAZ;AAEA,cAAMC,OAAO,GAAGJ,OAAhB;AAEA,cAAMV,IAAI,GAAGc,OAAb;AAEAD,QAAAA,KAAK,GAAGC,OAAR;AAEe,eAAO;AACrBL,UAAAA,IAAI,EAAE;AAAET,YAAAA,IAAF;AAAQa,YAAAA;AAAR;AADe,SAAP;AAGf,OAnBc,CAAhB;AAqBAV,MAAAA,KAAK,CAACP,KAAN,GAAcS,OAAd;AAEA,YAAMU,WAAW,GAAGV,OAAO,CACzBG,GADkB,CACbQ,IAAD,IAAW,OAAMA,IAAI,CAACP,IAAL,CAAUT,IAAK,SAAQgB,IAAI,CAACP,IAAL,CAAUT,IAAK,KADzC,EAElBiB,MAFkB,CAEVD,IAAD,IAAUA,IAAI,KAAK,eAFR,CAApB;AAGAb,MAAAA,KAAK,CAACN,QAAN,GAAiBkB,WAAW,CAACG,IAAZ,CAAiB,IAAjB,CAAjB;AACA,KA9BQ;;AAgCTC,IAAAA,UAAU,CAAChB,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACE,OAArB;AACA;;AAlCQ;AAHoB,CAAD,CAA9B;AAyCA,OAAO,MAAMc,WAAW,GAAGrB,UAAU,CAACsB,OAA/B;AAEP,eAAetB,UAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface Copy_obj {\n\ttext: {\n\t\tname: string;\n\t\tvalue: string;\n\t};\n}\n\ninterface TypeState {\n\tcopys: Copy_obj[];\n\ttextarea: string;\n\terror: string;\n}\n\nconst initialState: TypeState = {\n\tcopys: [],\n\ttextarea:\n\t\t'Test1\\nTest2\\nTest3\\nTest4',\n\terror: \"\",\n};\n\nconst copySlice2 = createSlice({\n\tname: \"copy\",\n\tinitialState,\n\treducers: {\n\t\t// Stores text objects from textarea\n\t\tcreateCopy(state: { copys: Copy_obj[]; textarea: string }, action: { payload: string }) {\n\t\t\tconst textObj = action.payload\n\t\t\t\t.split(\"\\n\")\n                \n\t\t\t\t// .filter((text) => text.includes(\",\"))\n                \n\t\t\t\t.map((text) => {\n\t\t\t\t\tconst newText = text.replace(\",\", \"\").trim();\n                    \n\t\t\t\t\tlet value = \"\";\n\t\t\t\t\t\n\t\t\t\t\tconst textArr = newText;\n\n\t\t\t\t\tconst name = textArr;\n                    \n\t\t\t\t\tvalue = textArr;\n                  \n                    return {\n\t\t\t\t\t\ttext: { name, value },\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\tstate.copys = textObj;\n            \n\t\t\tconst updatedCopy = textObj\n\t\t\t\t.map((copy) => `{{ $${copy.text.name} := $.${copy.text.name} }}`)\n\t\t\t\t.filter((copy) => copy !== \"{{ $ := $. }}\");\n\t\t\tstate.textarea = updatedCopy.join(\"\\n\");\n\t\t},\n\n\t\tfoundError(state, action) {\n\t\t\tstate.error = action.payload;\n\t\t},\n\t},\n});\n\nexport const copyActions = copySlice2.actions;\n\nexport default copySlice2;\n"]},"metadata":{},"sourceType":"module"}