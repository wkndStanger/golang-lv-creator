{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  copys: [],\n  textarea: '{{ $Test1 := \"Te xt\" }}\\n{{ $Test2 := \"Teeeeeext\" }}\\n{{ $Test3 := \"Texxxxxt\" }}\\n{{ $Test4 := \"Tettttt\" }}',\n  error: \"\"\n};\nconst copySlice = createSlice({\n  name: \"copy\",\n  initialState,\n  reducers: {\n    // Stores text objects from textarea\n    createCopy(state, action) {\n      const textObj = action.payload.split(\"\\n\").filter(text => text.includes(\"{{\")).map(text => {\n        const newText = text.replace(/\\s+/g, \" \").trim();\n        let value = \"\";\n        let sentence = \"\";\n\n        if (newText.includes('= \"')) {\n          sentence = newText.split('= \"')[1].split('\" }}')[0];\n        }\n\n        const textArr = newText.split(\" \");\n        const name = textArr[1].slice(1);\n        value = (sentence ? sentence : textArr[3].includes('\"\"') ? \"\" : textArr[3]).replaceAll('\\\\\"', '\"').replaceAll(\"\\\\'\", \"'\");\n        return {\n          text: {\n            name,\n            value\n          }\n        };\n      });\n      state.copys = textObj;\n      const updatedCopy = textObj.map(copy => `{{ $${copy.text.name} := $.${copy.text.name} }}`).filter(copy => copy !== \"{{ $ := $. }}\");\n      state.textarea = updatedCopy.join(\"\\n\");\n    },\n\n    foundError(state, action) {\n      state.error = action.payload;\n    }\n\n  }\n});\nexport const copyActions = copySlice.actions;\nexport default copySlice;","map":{"version":3,"sources":["/Users/chrisstranger/Desktop/golang-lv-creator/src/store/copy-slice.tsx"],"names":["createSlice","initialState","copys","textarea","error","copySlice","name","reducers","createCopy","state","action","textObj","payload","split","filter","text","includes","map","newText","replace","trim","value","sentence","textArr","slice","replaceAll","updatedCopy","copy","join","foundError","copyActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAeA,MAAMC,YAAuB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,EADwB;AAE/BC,EAAAA,QAAQ,EACP,6GAH8B;AAI/BC,EAAAA,KAAK,EAAE;AAJwB,CAAhC;AAOA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,MADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACT;AACAC,IAAAA,UAAU,CAACC,KAAD,EAAkDC,MAAlD,EAA+E;AACxF,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,CACdC,KADc,CACR,IADQ,EAEdC,MAFc,CAENC,IAAD,IAAUA,IAAI,CAACC,QAAL,CAAc,IAAd,CAFH,EAGdC,GAHc,CAGTF,IAAD,IAAU;AACd,cAAMG,OAAO,GAAGH,IAAI,CAACI,OAAL,CAAa,MAAb,EAAqB,GAArB,EAA0BC,IAA1B,EAAhB;AAEA,YAAIC,KAAK,GAAG,EAAZ;AACA,YAAIC,QAAQ,GAAG,EAAf;;AAEA,YAAIJ,OAAO,CAACF,QAAR,CAAiB,KAAjB,CAAJ,EAA6B;AAC5BM,UAAAA,QAAQ,GAAGJ,OAAO,CAACL,KAAR,CAAc,KAAd,EAAqB,CAArB,EAAwBA,KAAxB,CAA8B,MAA9B,EAAsC,CAAtC,CAAX;AACA;;AAED,cAAMU,OAAO,GAAGL,OAAO,CAACL,KAAR,CAAc,GAAd,CAAhB;AACA,cAAMP,IAAI,GAAGiB,OAAO,CAAC,CAAD,CAAP,CAAWC,KAAX,CAAiB,CAAjB,CAAb;AAEAH,QAAAA,KAAK,GAAG,CAACC,QAAQ,GAAGA,QAAH,GAAcC,OAAO,CAAC,CAAD,CAAP,CAAWP,QAAX,CAAoB,IAApB,IAA4B,EAA5B,GAAiCO,OAAO,CAAC,CAAD,CAA/D,EACNE,UADM,CACK,KADL,EACY,GADZ,EAENA,UAFM,CAEK,KAFL,EAEY,GAFZ,CAAR;AAGA,eAAO;AACNV,UAAAA,IAAI,EAAE;AAAET,YAAAA,IAAF;AAAQe,YAAAA;AAAR;AADA,SAAP;AAGA,OAtBc,CAAhB;AAwBAZ,MAAAA,KAAK,CAACP,KAAN,GAAcS,OAAd;AACA,YAAMe,WAAW,GAAGf,OAAO,CACzBM,GADkB,CACbU,IAAD,IAAW,OAAMA,IAAI,CAACZ,IAAL,CAAUT,IAAK,SAAQqB,IAAI,CAACZ,IAAL,CAAUT,IAAK,KADzC,EAElBQ,MAFkB,CAEVa,IAAD,IAAUA,IAAI,KAAK,eAFR,CAApB;AAGAlB,MAAAA,KAAK,CAACN,QAAN,GAAiBuB,WAAW,CAACE,IAAZ,CAAiB,IAAjB,CAAjB;AACA,KAhCQ;;AAkCTC,IAAAA,UAAU,CAACpB,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACE,OAArB;AACA;;AApCQ;AAHmB,CAAD,CAA7B;AA2CA,OAAO,MAAMkB,WAAW,GAAGzB,SAAS,CAAC0B,OAA9B;AAEP,eAAe1B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface Copys_obj {\n\ttext: {\n\t\tname: string;\n\t\tvalue: string;\n\t};\n}\n\ninterface TypeState {\n\tcopys: Copys_obj[];\n\ttextarea: string;\n\terror: string;\n}\n\nconst initialState: TypeState = {\n\tcopys: [],\n\ttextarea:\n\t\t'{{ $Test1 := \"Te xt\" }}\\n{{ $Test2 := \"Teeeeeext\" }}\\n{{ $Test3 := \"Texxxxxt\" }}\\n{{ $Test4 := \"Tettttt\" }}',\n\terror: \"\",\n};\n\nconst copySlice = createSlice({\n\tname: \"copy\",\n\tinitialState,\n\treducers: {\n\t\t// Stores text objects from textarea\n\t\tcreateCopy(state: { copys: Copys_obj[]; textarea: string }, action: { payload: string }) {\n\t\t\tconst textObj = action.payload\n\t\t\t\t.split(\"\\n\")\n\t\t\t\t.filter((text) => text.includes(\"{{\"))\n\t\t\t\t.map((text) => {\n\t\t\t\t\tconst newText = text.replace(/\\s+/g, \" \").trim();\n\t\t\t\t\t\n\t\t\t\t\tlet value = \"\";\n\t\t\t\t\tlet sentence = \"\";\n\n\t\t\t\t\tif (newText.includes('= \"')) {\n\t\t\t\t\t\tsentence = newText.split('= \"')[1].split('\" }}')[0];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst textArr = newText.split(\" \");\n\t\t\t\t\tconst name = textArr[1].slice(1);\n\n\t\t\t\t\tvalue = (sentence ? sentence : textArr[3].includes('\"\"') ? \"\" : textArr[3])\n\t\t\t\t\t\t.replaceAll('\\\\\"', '\"')\n\t\t\t\t\t\t.replaceAll(\"\\\\'\", \"'\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: { name, value },\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\tstate.copys = textObj;\n\t\t\tconst updatedCopy = textObj\n\t\t\t\t.map((copy) => `{{ $${copy.text.name} := $.${copy.text.name} }}`)\n\t\t\t\t.filter((copy) => copy !== \"{{ $ := $. }}\");\n\t\t\tstate.textarea = updatedCopy.join(\"\\n\");\n\t\t},\n\n\t\tfoundError(state, action) {\n\t\t\tstate.error = action.payload;\n\t\t},\n\t},\n});\n\nexport const copyActions = copySlice.actions;\n\nexport default copySlice;\n"]},"metadata":{},"sourceType":"module"}